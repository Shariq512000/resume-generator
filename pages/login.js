// import axios from 'axios';
import React, { useEffect, useLayoutEffect, useState } from 'react'
import { Col, Container, Row } from 'react-bootstrap'
import Link from 'next/link';
import Image from "next/image";
import Head from 'next/head';
import { useRouter } from 'next/router';
import { Alert, Snackbar } from '@mui/material';
// import { useContext } from "react";
// import { GlobalContext } from '../context/Context';
// import { basePath } from '@/next.config';
import moment from 'moment';
import dynamic from 'next/dynamic';
// const DynamicComponent = dynamic(() => import('pages/dashboard2.jsx'));
// import axiosRetry from 'axios-retry';
// import warningPop from './warning-popup';
// import { redirect } from 'next/navigation'


function Login() {

  // let { state, dispatch } = useContext(GlobalContext);

  // const instance = axios.create();

  // axiosRetry(instance, { 
  //   retries: 3, // Number of retries
  //   retryDelay: axiosRetry.exponentialDelay // Exponential delay between retries
  // });

  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const [errorOpen, setErrorOpen] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [showPara, setShowPara] = useState(false);

  const [showPassField , setShowPassField] = useState(false);

  const [logingLoad , setLogingLoad] = useState(false);

  const [imgUrl , setImgUrl] = useState("")


  const handleErrorClose = () => {
    setErrorOpen(false)
    setErrorMessage("");
  }

  useLayoutEffect(() => {
    setImgUrl(`https://dinocamp.io/assets/images/login-img.webp`)
  } , [])

  const router = useRouter();

  // router.prefetch('/dashboard2');

  // useEffect(() => {
  //   if (localStorage.getItem("token") == null) {

  //   } else {
  //     pushUsers();
  //   }

  //   return () => {
      
  //   };
  // }, [])

  const pushUsers = async() => {
    await pushUser()
  }

  const pushUser = async() => {
    await router.push("/dashboard2");
  }

  

  const login = (e) => {
    e.preventDefault();

    setLogingLoad(true)

    if (!loginEmail.length || !loginPassword.length) {
      setErrorOpen(true)
      setErrorMessage("All field must be filled")
      setLogingLoad(false);
      return;
    }

    axios.post(`${state.baseUrl}api/auth/login`, {
      email: loginEmail,
      password: loginPassword,
      is_employee: "1"
    }, {
      withCredentials: true
    }).then(async(response) => {
      if(response.data?.status == "warning"){
        warningPop(response.data?.respMsg || response.data?.responseMessage || response.data?.message || "Please Try Again")
        return;
      }

      setLogingLoad(false);

      let user = {}
      Object?.keys(response.data.user).forEach((e , i) => {
        let newKey = e
        if(e?.slice(0 , 5) == "auth_"){
          newKey = e.replace("auth_" , "");
        }
        user = {...user , [newKey] : response.data.user[e]}
        
      })
      
      localStorage.setItem("token", response.data.access_token);
      localStorage.setItem("user", JSON.stringify(user));
      setShowPara(false);
      dispatch({
        type: 'LOGIN_TOKEN', payload: response.data.access_token
      })
      dispatch({
        type: 'USER_LOGIN', payload: user
      })
      router.push("/dashboard2");
    }).catch(err => {
      console.log(err)
      if(err?.response?.status == "401"){
        setErrorMessage("Invalid Email or Password");
        setErrorOpen(true);
        setLogingLoad(false);
      }else if(err?.message == "Network Error"){
        setErrorMessage("Network Error Please Try Again");
        setErrorOpen(true);
        setLogingLoad(false);
      }else{
        setErrorMessage("something went wrong! please try again");
        setErrorOpen(true);
        setLogingLoad(false);
      }
    })
  }


  return (
    <>
      <Head>
        <title>DINOHRMS - Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <main className="loginPage">
      <header className='userDashboardHeader py-3'>
        <div className="container">
          <Row className="align-items-center">
            <Col md="3">
              <div className="logo">

                <Image src={`/logo.png`} width={93} height={30} alt="" />

              </div>
            </Col>

            <Col md="9" className="text-end d-none">

              <Link href={''} className='d-inline-flex align-items-center gap-2 fs-15 fg-66 fw-5 lh-normal btn'>
                Back to Web
                <span className="fs-20"><svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 -960 960 960" width="1em" fill="currentColor"><path d="m828-89.23-128-128V-114h-60v-206h206v60H741.77l128 128L828-89.23ZM480-100q-78.85 0-148.2-29.92t-120.65-81.21q-51.3-51.29-81.22-120.63Q100-401.1 100-479.93q0-78.84 29.92-148.21t81.21-120.68q51.29-51.31 120.63-81.25Q401.1-860 479.93-860q78.84 0 148.21 29.93 69.37 29.92 120.68 81.22t81.25 120.65Q860-558.85 860-480q0 18.08-1.71 36.15-1.71 18.08-5.14 36.16h-61.61q4.23-18.08 6.34-36.16Q800-461.92 800-480q0-21.8-2.88-43.59-2.89-21.8-9.04-43.33h-148.7q3.77 21.53 5.47 43.33 1.69 21.79 1.69 43.59 0 18.08-1.21 36.15-1.22 18.08-3.64 36.16h-60q2.43-18.08 3.64-36.16 1.21-18.07 1.21-36.15 0-21.8-1.69-43.59-1.7-21.8-5.46-43.33H380.61q-3.76 21.53-5.46 43.36-1.69 21.83-1.69 43.66 0 21.82 1.69 43.55 1.7 21.74 5.46 43.27h147.08v60H394.38q13.3 47.2 34.34 90.57 21.05 43.36 51.28 81.66 18.08 0 36.15-2.11 18.08-2.12 36.16-4.12v60.85q-18.08 2-36.16 4.11Q498.08-100 480-100ZM171.92-393.08h148.7q-3.77-21.53-5.47-43.36-1.69-21.83-1.69-43.66 0-21.82 1.69-43.55 1.7-21.74 5.47-43.27h-148.7q-6.15 21.53-9.04 43.36Q160-501.73 160-479.9q0 21.82 2.88 43.55 2.89 21.74 9.04 43.27Zm25.16-233.84h135.51q10.33-43.54 27.49-84.23 17.15-40.7 42.46-77.77-67.31 14.92-120.73 57.38-53.43 42.46-84.73 104.62Zm205.46 455.84q-24.15-37.46-41.5-78.15-17.35-40.69-28.27-83.85H197.08q31.3 61.77 84.92 104.23 53.62 42.47 120.54 57.77Zm-8.16-455.84h171.24q-12.77-47.23-34.4-90.17-21.63-42.93-51.22-82.06-29.85 38.3-51.35 81.65-21.5 43.35-34.27 90.58Zm232.85 0h135.69q-31.3-62.16-84.73-104.81-53.42-42.66-120.73-57.19 24.15 37.46 40.92 78.34 16.77 40.89 28.85 83.66Z"/></svg></span>
              </Link>

            </Col>
          </Row>
        </div>
      </header>
        <div className="mainBody overflow-x-hidden">
          <Container fluid className='p-0'>
            <Row className='align-items-center'>
              <Col md="4">
                <div className='logIn-fromMain'>
                  <div className='LogInForm-hd text-center'>
                    <div className='icon pb-5'>
                      <Image src={`/logo-icon.png`} width="180" height="40" alt="Logo" />
                    </div>

                    <h1 className='fs-28 fg-66 fw-6 pb-5 lh-normal'>Sign in with Company Email</h1>

                    {/* <p className='fg-red fw-6 pb-2 text-center fs-18'>The Default Password is 123456</p> */}
                  </div>

                  <form>
                    <div className='logIn-from'>
                      <div className="loginBox-fFeild">
                        <input type="email" id="email" name="email"
                          placeholder="Email Address"
                          onChange={() => {
                            setShowPassField(false);
                          }}
                          className={`fw-5 fs-16 fg-33 lh-normal border border-DD bg-white ${(showPassField) ? "rounded-top-5 border-bottom-0" : "rounded-5" }`}
                        />
                        {(!showPassField) ?
                          <button className="border-0 bg-none rounded-1 fg-99" onClick={(e) => {
                            e.preventDefault();
                            let val = document.getElementById("email").value;

                            var validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

                            if (val.match(validRegex)) {
                          
                              // alert("Valid email address!");

                              setLoginEmail(val);

                              console.log("Email Matched");
                              setShowPassField(true);
                              // document.form1.text1.focus();

                              let passInp = document.getElementById("password");

                              setTimeout(() => {
                                document.getElementById("password").focus()
                              },100)
                          
                              // return;
                          
                            } else {
                          
                              // alert("Invalid email address!");

                              console.log("Email Not Matched");
                              setShowPassField(false);
                          
                              // document.form1.text1.focus();
                          
                              // return false;
                          
                            }
                          }}><svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#999999"><path d="m480-320 160-160-160-160-56 56 64 64H320v80h168l-64 64 56 56Zm0 240q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/></svg></button>
                          :
                          null
                        }
                      </div>
                      <div className={`loginBox-fFeild ${ (showPassField) ? '' : 'd-none'}`}>
                          <input type="password" id="password" name="password"
                            placeholder="Password"
                            onChange={e => setLoginPassword(e.target.value)}
                            className='fw-5 fs-16 fg-33 lh-normal border border-DD bg-white rounded-bottom-5'
                          />
                            <div className={`spinner-border loginLoader ${(logingLoad) ? "" : "d-none"}`} role="status">
                            </div>
                            <button className={`border-0 bg-none rounded-1 fg-99 ${(logingLoad) ? "d-none" : ""}`} onClick={login}><svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#999999"><path d="m480-320 160-160-160-160-56 56 64 64H320v80h168l-64 64 56 56Zm0 240q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/></svg></button>
                          
                          
                        </div>


                      <div className='loginBox-rememberMe pt-4 pb-4 text-center'>
                        <label htmlFor="rememberme"
                          className='d-inline-flex gap-2 justify-content-center align-items-center fs-16 fg-99 fw-5 lh-normal'
                        >
                          <input type='checkbox' id='rememberme' />
                          Remember me
                        </label>
                      </div>

                      <div className='text-center pb-4 mb-4'>
                        {(showPara) ? <p className='text-center fg-red fs-14 fw-5 bg-light-red d-inline-flex align-items-center justify-content-center rounded-3 py-2 px-3 m-auto'>{errorMessage}</p> : null}

                      </div>

                      {/* <div className='text-center pb-5 mb-4'>
                        <a href="#" className="loginBox-forgotPassword fs-16 fg-99 fw-5 lh-normal pb-1 position-relative border-bottom boder-99">Forgotten your ID or password?</a>
                      </div> */}
                    </div>
                  </form>

                  {/* <div className='otherLogIn'>
                    <span className='fs-14 fg-99 fw-4 lh-normal hd'>or login with</span>

                    <div className='loginSocialIcon pt-5 pb-4 gap-3 d-flex justify-content-center align-items-center'>
                      <Link href={''} className='border border-DD rounded-circle p-2 d-flex justify-content-center align-items-center'>
                        <Image src={'/fb.png'} width={40} height={40} alt='Icon' />
                      </Link>

                      <Link href={''} className='border border-DD rounded-circle p-2 d-flex justify-content-center align-items-center'>
                        <Image src={'/gm.png'} width={40} height={40} alt='Icon' />
                      </Link>

                      <Link href={''} className='border border-DD rounded-circle p-2 d-flex justify-content-center align-items-center'>
                        <Image src={'/in.png'} width={40} height={40} alt='Icon' />
                      </Link>
                    </div>

                    <p className='text-center fg-99 fs-16 fw-4 lh-16'>
                      Don’t have an account?
                      <Link href={'/register'} className='fg-66 fs-16 fw-7 lh-16 ms-2'>Join Now</Link>
                    </p>
                  </div> */}
                </div>
              </Col>

              <Col md="8">
                <div className='logIn-images'>
                  <Image src={imgUrl} width={966} height={738} alt='Images' />
                </div>
              </Col>
            </Row>
          </Container>
        </div>

        <Snackbar open={errorOpen} autoHideDuration={3000} onClose={handleErrorClose} anchorOrigin={{
          vertical: 'top',
          horizontal: 'center'
        }}>
          <Alert onClose={handleErrorClose} severity="error" sx={{ width: '100%' }}>
            {errorMessage}
          </Alert>
        </Snackbar>
      <footer className='userDashboardFooter'>
        <div className="container">
          <div className="row">
            <div className="col-md-6">
              <div className="footerNav d-flex align-items-center column-gap-2">
                <Link href="">System Status</Link>
                <span>|</span>
                <Link href="">Privacy Policy</Link>
                <span>|</span>
                <Link href="">Terms & Conditions</Link>
              </div>
            </div>

            <div className="col-md-6 text-end">
              <div className="copyright">
                <p>Copyright © 2023 HRMS Inc. All rights reserved.</p>
              </div>
            </div>
          </div>
        </div>
      </footer>
      </main>

    </>
  )
}

export default Login
